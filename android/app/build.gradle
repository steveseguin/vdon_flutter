plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) { flutterVersionName = '1.0.0' }

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) { flutterVersionCode = 1 }

def flutterTargetSdkVersion = localProperties.getProperty('flutter.targetSdkVersion')
if (flutterTargetSdkVersion == null) { flutterTargetSdkVersion = '36' }

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def hasReleaseKeystore = keystorePropertiesFile.exists() &&
        keystoreProperties['storeFile'] &&
        file(keystoreProperties['storeFile']).exists()

if (!hasReleaseKeystore) {
    println 'Using debug signing configuration for release builds because key.properties was not found.'
}

android {
    compileSdkVersion 36

    defaultConfig {
        applicationId "flutter.vdo.ninja"
        minSdkVersion 21
        targetSdkVersion 36
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64'
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    signingConfigs {
        if (hasReleaseKeystore) {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }
    buildTypes {
        release {
            if (hasReleaseKeystore) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
            // Removed ProGuard configuration
        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/proguard/androidx-annotations.pro']
        }
    }
    lint {
        disable 'InvalidPackage'
    }

    namespace 'de.julianassmann.flutter_background_example'
}


// Print configuration properties to the console
println "-----------------------------------------"
println "App version: ${flutterVersionName}"
println "Build number: ${flutterVersionCode}"
println "Target SDK version: ${flutterTargetSdkVersion}"
println "-----------------------------------------"

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.4'
    implementation "androidx.core:core-ktx:1.16.0"
}
